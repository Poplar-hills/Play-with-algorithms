分治思想（Divide & Conquer）：

- 分而治之，将原问题分解成 n 个规模较小的子问题，这些子问题互相独立且与原问题具有相同的结构，递归地解这些
  子问题，然后将各子问题的解合并得到原问题的解。

- 分治与递归：分解出的子问题往往是原问题的较小模式，这就为使用递归提供了方便。递归地应用分治，使得最终子问
  题缩小到很容易直接求解，这自然导致递归过程的产生。因此递归是分治思想的一种实现。

- 使用条件：
  1. 最小规模可解性：该问题的规模缩小到一定程度就可以容易地解决；
  2. 可分性：该问题可以分解为若干个规模较小的相同问题；
  3. 可合性：该问题分解出的子问题的解可以合并为该问题的解；
  4. 子问题独立性：该问题所分解出的各个子问题是相互独立的，即子问题之间不包含公共子问题。

- 分治算法设计过程 —— Divide, Conquer, Combine：
  1. Divide the problem into a number of sub-problems that are smaller instances of the same problem.
  2. Conquer the sub-problems by solving them recursively. If they are small enough, solve
     the sub-problems as base cases.
  3. Combine the solutions to the sub-problems into the solution for the original problem.

- Merge sort vs. Quick sort：
  - 两种算法都使用到了分治思想，但是他们分别代表了分治思想的两种实现方法：
    1. Merge sort 在"分"的问题上没有过多考虑，直接简单快速的进行二分。它的重点在于"治"，以及何将"治"完之后的子问题
       的解合并起来形成原问题的解。
    2. Quick sort 则是重在如何"分" —— 整个 partition 的过程就是在寻找标定点 pivot，找到之后才开始"分"。这样分完
       之后"治"（也就是合）的过程就比较简单了。
  - 稳定性：Merge sort 是稳定的；而 Quick sort 是不稳定的。
  - 适用性：Quick sort 非常依赖于数组的随机访问能力，因此不适用于链表；而 Merge Sort 适用于链表。
